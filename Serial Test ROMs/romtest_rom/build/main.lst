                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _puthex16
                                     13 	.globl _puts
                                     14 	.globl _entmon
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area _DATA
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area _INITIALIZED
                                     26 ;--------------------------------------------------------
                                     27 ; absolute external ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area _DABS (ABS)
                                     30 ;--------------------------------------------------------
                                     31 ; global & static initialisations
                                     32 ;--------------------------------------------------------
                                     33 	.area _HOME
                                     34 	.area _GSINIT
                                     35 	.area _GSFINAL
                                     36 	.area _GSINIT
                                     37 ;--------------------------------------------------------
                                     38 ; Home
                                     39 ;--------------------------------------------------------
                                     40 	.area _HOME
                                     41 	.area _HOME
                                     42 ;--------------------------------------------------------
                                     43 ; code
                                     44 ;--------------------------------------------------------
                                     45 	.area _CODE
                                     46 ;src/main.c:7: void main() {
                                     47 ;	---------------------------------
                                     48 ; Function main
                                     49 ; ---------------------------------
      000000                         50 _main::
                                     51 ;src/main.c:10: puts("March test...\n");
      000000 21r8Fr00         [10]   52 	ld	hl, #___str_0
      000003 CDr00r00         [17]   53 	call	_puts
                                     54 ;src/main.c:12: for (addr = RAM_START; addr <= RAM_END; ++addr)
      000006 01 60 78         [10]   55 	ld	bc, #0x7860
      000009                         56 00113$:
                                     57 ;src/main.c:13: *addr = 0x00;
      000009 AF               [ 4]   58 	xor	a, a
      00000A 02               [ 7]   59 	ld	(bc), a
                                     60 ;src/main.c:12: for (addr = RAM_START; addr <= RAM_END; ++addr)
      00000B 03               [ 6]   61 	inc	bc
      00000C 3E FF            [ 7]   62 	ld	a, #0xff
      00000E B9               [ 4]   63 	cp	a, c
      00000F 98               [ 4]   64 	sbc	a, b
      000010 30 F7            [12]   65 	jr	NC, 00113$
                                     66 ;src/main.c:15: for (addr = RAM_START; addr <= RAM_END; ++addr) {
      000012 01 60 78         [10]   67 	ld	bc, #0x7860
      000015                         68 00115$:
                                     69 ;src/main.c:16: if (*addr != 0x00) {
      000015 0A               [ 7]   70 	ld	a, (bc)
      000016 B7               [ 4]   71 	or	a, a
      000017 28 15            [12]   72 	jr	Z, 00103$
                                     73 ;src/main.c:17: puts("Error @ ");
      000019 C5               [11]   74 	push	bc
      00001A 21r9Er00         [10]   75 	ld	hl, #___str_1
      00001D CDr00r00         [17]   76 	call	_puts
      000020 C1               [10]   77 	pop	bc
                                     78 ;src/main.c:18: puthex16((unsigned int)(unsigned short)addr);
      000021 69               [ 4]   79 	ld	l, c
                                     80 ;	spillPairReg hl
                                     81 ;	spillPairReg hl
      000022 60               [ 4]   82 	ld	h, b
                                     83 ;	spillPairReg hl
                                     84 ;	spillPairReg hl
      000023 C5               [11]   85 	push	bc
      000024 CDr00r00         [17]   86 	call	_puthex16
      000027 21rA7r00         [10]   87 	ld	hl, #___str_2
      00002A CDr00r00         [17]   88 	call	_puts
      00002D C1               [10]   89 	pop	bc
      00002E                         90 00103$:
                                     91 ;src/main.c:21: *addr = 0xFF;
      00002E 3E FF            [ 7]   92 	ld	a, #0xff
      000030 02               [ 7]   93 	ld	(bc), a
                                     94 ;src/main.c:15: for (addr = RAM_START; addr <= RAM_END; ++addr) {
      000031 03               [ 6]   95 	inc	bc
      000032 3E FF            [ 7]   96 	ld	a, #0xff
      000034 B9               [ 4]   97 	cp	a, c
      000035 98               [ 4]   98 	sbc	a, b
      000036 30 DD            [12]   99 	jr	NC, 00115$
                                    100 ;src/main.c:24: for (addr = RAM_END; ; --addr) {
      000038 01 FF FF         [10]  101 	ld	bc, #0xffff
      00003B                        102 00117$:
                                    103 ;src/main.c:25: if (*addr != 0xFF) {
      00003B 0A               [ 7]  104 	ld	a, (bc)
      00003C 3C               [ 4]  105 	inc	a
      00003D 28 15            [12]  106 	jr	Z, 00106$
                                    107 ;src/main.c:26: puts("Error @ ");
      00003F C5               [11]  108 	push	bc
      000040 21r9Er00         [10]  109 	ld	hl, #___str_1
      000043 CDr00r00         [17]  110 	call	_puts
      000046 C1               [10]  111 	pop	bc
                                    112 ;src/main.c:27: puthex16((unsigned int)(unsigned short)addr);
      000047 69               [ 4]  113 	ld	l, c
                                    114 ;	spillPairReg hl
                                    115 ;	spillPairReg hl
      000048 60               [ 4]  116 	ld	h, b
                                    117 ;	spillPairReg hl
                                    118 ;	spillPairReg hl
      000049 C5               [11]  119 	push	bc
      00004A CDr00r00         [17]  120 	call	_puthex16
      00004D 21rA7r00         [10]  121 	ld	hl, #___str_2
      000050 CDr00r00         [17]  122 	call	_puts
      000053 C1               [10]  123 	pop	bc
      000054                        124 00106$:
                                    125 ;src/main.c:30: *addr = 0x00;
      000054 AF               [ 4]  126 	xor	a, a
      000055 02               [ 7]  127 	ld	(bc), a
                                    128 ;src/main.c:31: if (addr == RAM_START) break;
      000056 79               [ 4]  129 	ld	a, c
      000057 D6 60            [ 7]  130 	sub	a, #0x60
      000059 20 05            [12]  131 	jr	NZ, 00183$
      00005B 78               [ 4]  132 	ld	a, b
      00005C D6 78            [ 7]  133 	sub	a, #0x78
      00005E 28 03            [12]  134 	jr	Z, 00109$
      000060                        135 00183$:
                                    136 ;src/main.c:24: for (addr = RAM_END; ; --addr) {
      000060 0B               [ 6]  137 	dec	bc
      000061 18 D8            [12]  138 	jr	00117$
      000063                        139 00109$:
                                    140 ;src/main.c:34: for (addr = RAM_START; addr <= RAM_END; ++addr) {
      000063 01 60 78         [10]  141 	ld	bc, #0x7860
      000066                        142 00119$:
                                    143 ;src/main.c:35: if (*addr != 0x00) {
      000066 0A               [ 7]  144 	ld	a, (bc)
      000067 B7               [ 4]  145 	or	a, a
      000068 28 15            [12]  146 	jr	Z, 00120$
                                    147 ;src/main.c:36: puts("Final err @ ");
      00006A C5               [11]  148 	push	bc
      00006B 21rA9r00         [10]  149 	ld	hl, #___str_3
      00006E CDr00r00         [17]  150 	call	_puts
      000071 C1               [10]  151 	pop	bc
                                    152 ;src/main.c:37: puthex16((unsigned int)(unsigned short)addr);
      000072 69               [ 4]  153 	ld	l, c
                                    154 ;	spillPairReg hl
                                    155 ;	spillPairReg hl
      000073 60               [ 4]  156 	ld	h, b
                                    157 ;	spillPairReg hl
                                    158 ;	spillPairReg hl
      000074 C5               [11]  159 	push	bc
      000075 CDr00r00         [17]  160 	call	_puthex16
      000078 21rA7r00         [10]  161 	ld	hl, #___str_2
      00007B CDr00r00         [17]  162 	call	_puts
      00007E C1               [10]  163 	pop	bc
      00007F                        164 00120$:
                                    165 ;src/main.c:34: for (addr = RAM_START; addr <= RAM_END; ++addr) {
      00007F 03               [ 6]  166 	inc	bc
      000080 3E FF            [ 7]  167 	ld	a, #0xff
      000082 B9               [ 4]  168 	cp	a, c
      000083 98               [ 4]  169 	sbc	a, b
      000084 30 E0            [12]  170 	jr	NC, 00119$
                                    171 ;src/main.c:42: puts("Test done.\n");
      000086 21rB6r00         [10]  172 	ld	hl, #___str_4
      000089 CDr00r00         [17]  173 	call	_puts
                                    174 ;src/main.c:43: entmon();
                                    175 ;src/main.c:44: }
      00008C C3r00r00         [10]  176 	jp	_entmon
      00008F                        177 ___str_0:
      00008F 4D 61 72 63 68 20 74   178 	.ascii "March test..."
             65 73 74 2E 2E 2E
      00009C 0A                     179 	.db 0x0a
      00009D 00                     180 	.db 0x00
      00009E                        181 ___str_1:
      00009E 45 72 72 6F 72 20 40   182 	.ascii "Error @ "
             20
      0000A6 00                     183 	.db 0x00
      0000A7                        184 ___str_2:
      0000A7 0A                     185 	.db 0x0a
      0000A8 00                     186 	.db 0x00
      0000A9                        187 ___str_3:
      0000A9 46 69 6E 61 6C 20 65   188 	.ascii "Final err @ "
             72 72 20 40 20
      0000B5 00                     189 	.db 0x00
      0000B6                        190 ___str_4:
      0000B6 54 65 73 74 20 64 6F   191 	.ascii "Test done."
             6E 65 2E
      0000C0 0A                     192 	.db 0x0a
      0000C1 00                     193 	.db 0x00
                                    194 	.area _CODE
                                    195 	.area _INITIALIZER
                                    196 	.area _CABS (ABS)
