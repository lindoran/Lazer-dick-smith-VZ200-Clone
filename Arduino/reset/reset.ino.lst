
/tmp/arduino_build_54296/reset.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	40 c0       	rjmp	.+128    	; 0x8c <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
__trampolines_start():
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
__do_clear_bss():
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a9 36       	cpi	r26, 0x69	; 105
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
.do_clear_bss_start():
  3a:	72 d0       	rcall	.+228    	; 0x120 <main>
  3c:	a4 c0       	rjmp	.+328    	; 0x186 <_exit>

0000003e <__bad_interrupt>:
__vector_1():
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <micros>:
micros():
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:360
    unsigned int r; // needed for some frequencies, optimized away otherwise
    unsigned char f; // temporary storage for millis fraction counter
    unsigned char q = 0; // record whether an overflow is flagged
#endif
    unsigned long m;
    uint8_t t, oldSREG = SREG;
  40:	3f b7       	in	r19, 0x3f	; 63
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:362

    cli();
  42:	f8 94       	cli
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:367
#ifdef CORRECT_EXACT_MICROS
    m = millis_timer_millis;
    f = millis_timer_fract;
#else
    m = millis_timer_overflow_count;
  44:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <millis_timer_overflow_count>
  48:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <millis_timer_overflow_count+0x1>
  4c:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <millis_timer_overflow_count+0x2>
  50:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <millis_timer_overflow_count+0x3>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:370
#endif
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
  54:	22 b7       	in	r18, 0x32	; 50
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:389
      m++;
    #else
      q = 1;
    #endif
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
  56:	08 b6       	in	r0, 0x38	; 56
  58:	01 fe       	sbrs	r0, 1
  5a:	05 c0       	rjmp	.+10     	; 0x66 <micros+0x26>
  5c:	2f 3f       	cpi	r18, 0xFF	; 255
  5e:	19 f0       	breq	.+6      	; 0x66 <micros+0x26>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:391
    #ifndef CORRECT_EXACT_MICROS
      m++;
  60:	01 96       	adiw	r24, 0x01	; 1
  62:	a1 1d       	adc	r26, r1
  64:	b1 1d       	adc	r27, r1
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:411
    #else
      q = 1;
    #endif
  #endif

    SREG = oldSREG;
  66:	3f bf       	out	0x3f, r19	; 63
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:453
  #else
  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
  68:	ba 2f       	mov	r27, r26
  6a:	a9 2f       	mov	r26, r25
  6c:	98 2f       	mov	r25, r24
  6e:	88 27       	eor	r24, r24
  70:	bc 01       	movw	r22, r24
  72:	cd 01       	movw	r24, r26
  74:	62 0f       	add	r22, r18
  76:	71 1d       	adc	r23, r1
  78:	81 1d       	adc	r24, r1
  7a:	91 1d       	adc	r25, r1
  7c:	43 e0       	ldi	r20, 0x03	; 3
  7e:	66 0f       	add	r22, r22
  80:	77 1f       	adc	r23, r23
  82:	88 1f       	adc	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	4a 95       	dec	r20
  88:	d1 f7       	brne	.-12     	; 0x7e <micros+0x3e>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:508
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  #endif // !CORRECT_EXACT_MICROS
  }
  8a:	08 95       	ret

0000008c <__vector_5>:
__vector_5():
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	2f 93       	push	r18
  98:	3f 93       	push	r19
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
  a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <millis_timer_millis>
  a6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <millis_timer_millis+0x1>
  aa:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <millis_timer_millis+0x2>
  ae:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <millis_timer_millis+0x3>
  b2:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	26 e0       	ldi	r18, 0x06	; 6
  b8:	23 0f       	add	r18, r19
  ba:	2d 37       	cpi	r18, 0x7D	; 125
  bc:	68 f1       	brcs	.+90     	; 0x118 <__vector_5+0x8c>
  be:	29 e8       	ldi	r18, 0x89	; 137
  c0:	23 0f       	add	r18, r19
  c2:	03 96       	adiw	r24, 0x03	; 3
  c4:	a1 1d       	adc	r26, r1
  c6:	b1 1d       	adc	r27, r1
  c8:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <millis_timer_millis>
  d0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <millis_timer_millis+0x1>
  d4:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <millis_timer_millis+0x2>
  d8:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <millis_timer_millis+0x3>
  dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <millis_timer_overflow_count>
  e0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <millis_timer_overflow_count+0x1>
  e4:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <millis_timer_overflow_count+0x2>
  e8:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <millis_timer_overflow_count+0x3>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	a1 1d       	adc	r26, r1
  f0:	b1 1d       	adc	r27, r1
  f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <millis_timer_overflow_count>
  f6:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <millis_timer_overflow_count+0x1>
  fa:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <millis_timer_overflow_count+0x2>
  fe:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <millis_timer_overflow_count+0x3>
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti
 118:	02 96       	adiw	r24, 0x02	; 2
 11a:	a1 1d       	adc	r26, r1
 11c:	b1 1d       	adc	r27, r1
 11e:	d4 cf       	rjmp	.-88     	; 0xc8 <__vector_5+0x3c>

00000120 <main>:
main():
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	8a bd       	out	0x2a, r24	; 42
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
 124:	83 bf       	out	0x33, r24	; 51
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
 126:	78 94       	sei
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
 128:	89 b7       	in	r24, 0x39	; 57
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	89 bf       	out	0x39, r24	; 57
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	8c bd       	out	0x2c, r24	; 44
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8d bd       	out	0x2d, r24	; 45
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
 136:	87 ec       	ldi	r24, 0xC7	; 199
 138:	80 bf       	out	0x30, r24	; 48
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	86 b9       	out	0x06, r24	; 6
/home/david/Documents/Lazer-dick-smith-VZ200-Clone/Arduino/reset/reset.ino:9

#define RESET_PIN  0   // Physical pin 5 on ATtiny85 (Z80 /RESET output)

void setup() {
  // Assert Z80 /RESET (drive low)
  DDRB |= (1 << RESET_PIN);      // Set as output
 13e:	b8 9a       	sbi	0x17, 0	; 23
/home/david/Documents/Lazer-dick-smith-VZ200-Clone/Arduino/reset/reset.ino:10
  PORTB &= ~(1 << RESET_PIN);    // Output LOW
 140:	c0 98       	cbi	0x18, 0	; 24
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:518
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
 142:	7e df       	rcall	.-260    	; 0x40 <micros>
 144:	eb 01       	movw	r28, r22
 146:	84 e6       	ldi	r24, 0x64	; 100
 148:	c8 2e       	mov	r12, r24
 14a:	d1 2c       	mov	r13, r1
 14c:	e1 2c       	mov	r14, r1
 14e:	f1 2c       	mov	r15, r1
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:522

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
 150:	77 df       	rcall	.-274    	; 0x40 <micros>
 152:	6c 1b       	sub	r22, r28
 154:	7d 0b       	sbc	r23, r29
 156:	68 3e       	cpi	r22, 0xE8	; 232
 158:	73 40       	sbci	r23, 0x03	; 3
 15a:	78 f0       	brcs	.+30     	; 0x17a <main+0x5a>
 15c:	c1 14       	cp	r12, r1
 15e:	d1 04       	cpc	r13, r1
 160:	e1 04       	cpc	r14, r1
 162:	f1 04       	cpc	r15, r1
 164:	11 f4       	brne	.+4      	; 0x16a <main+0x4a>
/home/david/Documents/Lazer-dick-smith-VZ200-Clone/Arduino/reset/reset.ino:15

  delay(100);                    // Hold for 100ms

  // Release Z80 /RESET (high-Z, external pull-up pulls high)
  DDRB &= ~(1 << RESET_PIN);     // Set as input (high-Z)
 166:	b8 98       	cbi	0x17, 0	; 23
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0x48>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:523
        ms--;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	c8 1a       	sub	r12, r24
 16e:	d1 08       	sbc	r13, r1
 170:	e1 08       	sbc	r14, r1
 172:	f1 08       	sbc	r15, r1
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:524
        start += 1000;
 174:	c8 51       	subi	r28, 0x18	; 24
 176:	dc 4f       	sbci	r29, 0xFC	; 252
 178:	eb cf       	rjmp	.-42     	; 0x150 <main+0x30>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:520
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
 17a:	c1 14       	cp	r12, r1
 17c:	d1 04       	cpc	r13, r1
 17e:	e1 04       	cpc	r14, r1
 180:	f1 04       	cpc	r15, r1
 182:	31 f7       	brne	.-52     	; 0x150 <main+0x30>
 184:	f0 cf       	rjmp	.-32     	; 0x166 <main+0x46>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
